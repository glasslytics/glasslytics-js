class GlasslyticsJS { constructor(t) { this.publicKey = t, this.API_URL = 'https://glasslytics.com/api/v1', this.API_AUTH_TYPE = 'Basic ', this.API_CONTENT_TYPE = 'application/json; charset=utf-8', this.actions = {_class: this, push: this.pushAction, cleanTests: this.cleanTestingActions} } static _getAjax() { try { return new XMLHttpRequest() } catch (t) { } try { return new ActiveXObject('Msxml2.XMLHTTP.6.0') } catch (t) { } try { return new ActiveXObject('Msxml2.XMLHTTP.3.0') } catch (t) { } try { return new ActiveXObject('Msxml2.XMLHTTP') } catch (t) { } try { return new ActiveXObject('Microsoft.XMLHTTP') } catch (t) { } return !1 } pushAction(t, s = !1, e = {}) { return new Promise((a, c) => { var i = GlasslyticsJS._getAjax(); i.open('POST', this._class.API_URL + '/actions', !0), i.setRequestHeader('Authorization', this._class.API_AUTH_TYPE + this._class.publicKey), i.setRequestHeader('Content-Type', this._class.API_CONTENT_TYPE), i.onload = (() => { i.status >= 200 && i.status < 300 ? a(i.response) : c(i.statusText) }), i.onerror = (() => c(i.statusText)), s && (e || (e = {}), e.__test = !0), i.send(JSON.stringify({label: t, data: e})) }) } cleanTestingActions() { return new Promise((t, s) => { var e = GlasslyticsJS._getAjax(); e.open('DELETE', this._class.API_URL + '/testing-actions', !0), e.setRequestHeader('Authorization', this._class.API_AUTH_TYPE + this._class.publicKey), e.setRequestHeader('Content-Type', this._class.API_CONTENT_TYPE), e.onload = (() => { e.status >= 200 && e.status < 300 ? t(e.response) : s(e.statusText) }), e.onerror = (() => s(e.statusText)), e.send() }) } }
